import javax.swing.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import static java.nio.file.StandardOpenOption.*;
import java.util.*;
import java.awt.Color;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Adam
 */
public class VocabList extends javax.swing.JFrame {

    /**
     * Creates new form VocabList
     */
    public VocabList() throws IOException {
        if(fileWords.exists() && fileTypes.exists() && fileDefinitions.exists()) //if one or the others are missing, files will reset to default.
        {
            System.out.print("Files do exist.");
            initPWords(filePathWords);
            initPTypes(filePathWordType);
            initPDef(filePathDefinit);
            initComponents();
        }
        else
        {
            System.out.print("Files do not exist. Creating new ones...");
            initWords();
            initTypes();
            initDef();
            initComponents();
        }
    }
     ArrayList<String> vocabWords = new ArrayList<>();
     ArrayList<String> wordTypes = new ArrayList<>();
     ArrayList<String> definitions = new ArrayList<>();
     
     String filePathWords = getFolder() + "\\Words.txt";
     String filePathWordType = getFolder() + "\\Types.txt";
     String filePathDefinit = getFolder() + "\\Definitions.txt";
     
     File fileWords = new File(filePathWords);
     File fileTypes = new File(filePathWordType);
     File fileDefinitions = new File(filePathDefinit);
     
     Path pathWords = Paths.get(filePathWords);
     Path pathTypes = Paths.get(filePathWordType);
     Path pathDefinitions = Paths.get(filePathDefinit);
     
     ArrayList<String> sortedWords = new ArrayList<>();
     boolean sort = false; //default
     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addDialog = new javax.swing.JFrame();
        wordCatBox = new javax.swing.JComboBox<>();
        meaning = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        wordText = new javax.swing.JTextField();
        closeButton = new javax.swing.JButton();
        editDialog = new javax.swing.JFrame();
        wordCatBoxEdit = new javax.swing.JComboBox<>();
        editMeaning = new javax.swing.JTextField();
        editOkButton = new javax.swing.JButton();
        wordTextEdit = new javax.swing.JTextField();
        closeButtonEdit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        vocabList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        textDesc = new javax.swing.JTextArea();
        searchBar = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        sortButton = new javax.swing.JButton();

        addDialog.setTitle("Add Word");
        addDialog.setBounds(new java.awt.Rectangle(400, 400, 400, 145));

        wordCatBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Noun", "Verb", "Adjective", "Pronoun", "Adverb", "Interjection", "Preposition", "Conjunction" }));

        meaning.setText("Enter meaning here");
        meaning.setToolTipText("");

        okButton.setText("Enter");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        wordText.setText("Enter word here");
        wordText.setToolTipText("");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addDialogLayout = new javax.swing.GroupLayout(addDialog.getContentPane());
        addDialog.getContentPane().setLayout(addDialogLayout);
        addDialogLayout.setHorizontalGroup(
            addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton))
                    .addGroup(addDialogLayout.createSequentialGroup()
                        .addComponent(wordCatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wordText, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(closeButton))
                    .addComponent(meaning)))
        );
        addDialogLayout.setVerticalGroup(
            addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDialogLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wordCatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meaning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(okButton)
                .addContainerGap())
        );

        editDialog.setTitle("Edit Word");
        editDialog.setBounds(new java.awt.Rectangle(400, 400, 400, 145));

        wordCatBoxEdit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Noun", "Verb", "Adjective", "Pronoun", "Adverb", "Interjection", "Preposition", "Conjunction" }));

        editMeaning.setText("Enter meaning here");
        editMeaning.setToolTipText("");

        editOkButton.setText("Submit");
        editOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOkButtonActionPerformed(evt);
            }
        });

        wordTextEdit.setText("Enter word here");
        wordTextEdit.setToolTipText("");

        closeButtonEdit.setText("Close");
        closeButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editDialogLayout = new javax.swing.GroupLayout(editDialog.getContentPane());
        editDialog.getContentPane().setLayout(editDialogLayout);
        editDialogLayout.setHorizontalGroup(
            editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(editOkButton))
                    .addGroup(editDialogLayout.createSequentialGroup()
                        .addComponent(wordCatBoxEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wordTextEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(closeButtonEdit))
                    .addComponent(editMeaning)))
        );
        editDialogLayout.setVerticalGroup(
            editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editDialogLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wordTextEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wordCatBoxEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeButtonEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editMeaning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(editOkButton)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vocabulary List");
        setResizable(false);
        setSize(new java.awt.Dimension(185, 165));

        vocabList.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return vocabWords.size(); }
            public String getElementAt(int i) {return vocabWords.get(i);}
        });
        vocabList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                vocabListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(vocabList);

        textDesc.setColumns(20);
        textDesc.setLineWrap(true);
        textDesc.setRows(5);
        textDesc.setWrapStyleWord(true);
        jScrollPane2.setViewportView(textDesc);

        searchBar.setToolTipText("");
        searchBar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchBarCaretUpdate(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setToolTipText("");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.setToolTipText("");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        sortButton.setText("Sort");
        sortButton.setToolTipText("");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sortButton))
            .addComponent(searchBar, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(editButton)
                    .addComponent(removeButton)
                    .addComponent(sortButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
int x = 0;
    private void vocabListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_vocabListValueChanged

        System.out.print(vocabList.getSelectedIndex()); //get words count
        
        textDesc.setForeground(Color.black); //if error transpired, this resets the foreground
        int y = vocabList.getSelectedIndex();
        String test2 = vocabList.getSelectedValue();
       try
       {
           if(isSorted() == true)
           {
            if(sortedWords.contains(test2))
            {
           textDesc.setText(wordTypes.get(vocabWords.indexOf(test2)) + "\n\n" + definitions.get(vocabWords.indexOf(test2)));
            }
            else
            {
                System.out.print("Some sort of error occurred where it should not.");
            }
           }
           else //normal
           {
           textDesc.setText(wordTypes.get(y) + "\n\n" + definitions.get(y));
           }
           
       }
       catch(IndexOutOfBoundsException ex)
       {
          System.out.print("Index out of bounds.");
          vocabList.setSelectedIndex(-1);
          System.err.print(ex.getMessage());
       }
    }//GEN-LAST:event_vocabListValueChanged

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
       if(editDialog.isVisible())
        {
            editDialog.setVisible(false);
        }
       else
       {
            addDialog.setVisible(true);
       }
    }//GEN-LAST:event_addButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        addDialog.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        vocabWords.add(wordText.getText());
        wordTypes.add(wordCatBox.getItemAt(wordCatBox.getSelectedIndex()));
        definitions.add(meaning.getText());
        
        vocabList.setModel(new javax.swing.AbstractListModel<String>() { //refreshes the list.
            @Override
            public int getSize() { return vocabWords.size(); }
            @Override
            public String getElementAt(int i) { return vocabWords.get(i);}
        });
        sortedWords.add(wordText.getText());
        Collections.sort(sortedWords);
        setSorted(false);
                 try
         {
         OutputStream output1 = new BufferedOutputStream(Files.newOutputStream(pathWords, WRITE));
         BufferedWriter writer1 = new BufferedWriter(new OutputStreamWriter(output1));
         OutputStream output2 = new BufferedOutputStream(Files.newOutputStream(pathTypes, WRITE));
         BufferedWriter writer2 = new BufferedWriter(new OutputStreamWriter(output2));
         OutputStream output3 = new BufferedOutputStream(Files.newOutputStream(pathDefinitions, WRITE));
         BufferedWriter writer3 = new BufferedWriter(new OutputStreamWriter(output3));
         for(String ele:vocabWords)
         {
             writer1.write(ele);
             writer1.newLine();
         }
         writer1.close();
         for(String ele:wordTypes)
         {
             writer2.write(ele);
             writer2.newLine();
         }
         writer2.close();
         for(String ele:definitions)
         {
             writer3.write(ele);
             writer3.newLine();
         }
         writer3.close();
         }
         catch(Exception e)
         {
             System.out.print("Message: " + e);
         }
         addDialog.setVisible(false);
         wordText.setText("Enter word here");
         wordCatBox.setSelectedIndex(0);
         meaning.setText("Enter meaning here");
    }//GEN-LAST:event_okButtonActionPerformed

    private void editOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOkButtonActionPerformed
        int z = getIndex();
        vocabWords.set(z, wordTextEdit.getText());
        wordTypes.set(z,wordCatBoxEdit.getItemAt(wordCatBoxEdit.getSelectedIndex()));
        definitions.set(z, editMeaning.getText());
        if(isSorted() == true)
        {
        sortedWords.set(vocabList.getSelectedIndex(),wordTextEdit.getText());
        Collections.sort(sortedWords);
        }
        else
        {
        sortedWords.set(z,wordTextEdit.getText());
        Collections.sort(sortedWords);
        }
        vocabList.setModel(new javax.swing.AbstractListModel<String>() { //refreshes the list.
            @Override
            public int getSize() { return vocabWords.size(); }
            @Override
            public String getElementAt(int i) { return vocabWords.get(i);}
        });
        setSorted(false);
                 try
         {
         OutputStream out1 = new BufferedOutputStream(Files.newOutputStream(pathWords, WRITE,TRUNCATE_EXISTING));
         BufferedWriter writer1 = new BufferedWriter(new OutputStreamWriter(out1));
         OutputStream out2 = new BufferedOutputStream(Files.newOutputStream(pathTypes, WRITE,TRUNCATE_EXISTING));
         BufferedWriter writer2 = new BufferedWriter(new OutputStreamWriter(out2));
         OutputStream out3 = new BufferedOutputStream(Files.newOutputStream(pathDefinitions, WRITE,TRUNCATE_EXISTING));
         BufferedWriter writer3 = new BufferedWriter(new OutputStreamWriter(out3));
         for(String ele:vocabWords)
         {
             writer1.write(ele);
             writer1.newLine();
         }
         writer1.flush();
         writer1.close();
         for(String ele:wordTypes)
         {
             writer2.write(ele);
             writer2.newLine();
         }
         writer2.close();
         for(String ele:definitions)
         {
             writer3.write(ele);
             writer3.newLine();
         }
         writer3.close();
         }
         catch(Exception e)
         {
             System.out.print("Message: " + e);
         }
         editDialog.setVisible(false);
        
        
    }//GEN-LAST:event_editOkButtonActionPerformed

    private void closeButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonEditActionPerformed
        editDialog.setVisible(false);
    }//GEN-LAST:event_closeButtonEditActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int test = vocabList.getSelectedIndex();
        if(test == -1)
        {
            textDesc.setText("You must select a word on the list to edit.");
        }
        else
        {
           if(isSorted() == true)
           {
               setIndex(vocabWords.indexOf(vocabList.getSelectedValue()));
               setEditDialog(getIndex());
               editDialog.setVisible(true);
           }
           else
           {
            setIndex(vocabList.getSelectedIndex());
            setEditDialog(getIndex());
            editDialog.setVisible(true);
           }
        }
        if(addDialog.isVisible())
        {
            addDialog.setVisible(false); //prevents any errors that dumb users may try to attempt.
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int z = vocabList.getSelectedIndex();
        String removedWord = vocabList.getSelectedValue();
        if(isSorted() == true)
        {
            System.out.print("This is sorted");
            int x = vocabWords.indexOf(removedWord);
            System.out.print("This is the word to be removed: " + vocabWords.get(x));
            vocabWords.remove(x);
            vocabWords.trimToSize();
            wordTypes.remove(x);
            wordTypes.trimToSize();
            definitions.remove(x);
            definitions.trimToSize();
            sortedWords.remove(z);
            sortedWords.trimToSize();
            textDesc.setText("You have removed: " + removedWord);
        }
        else
        {
        int y = vocabWords.indexOf(removedWord);
        vocabWords.remove(z);
        vocabWords.trimToSize();
        wordTypes.remove(z);
        wordTypes.trimToSize();
        definitions.remove(z);
        definitions.trimToSize();
        sortedWords.remove(y);
        sortedWords.trimToSize();
        textDesc.setText("You have removed: " + removedWord);
        System.out.print(sortedWords.size());
        System.out.print(vocabWords.size());
        }
        vocabList.setModel(new javax.swing.AbstractListModel<String>() { //refreshes the list.
            @Override
            public int getSize() { return vocabWords.size(); }
            @Override
            public String getElementAt(int i) { return vocabWords.get(i);}
        });
        setSorted(false);
                 try
         {
         OutputStream o1 = new BufferedOutputStream(Files.newOutputStream(pathWords, WRITE,TRUNCATE_EXISTING));
         BufferedWriter writer1 = new BufferedWriter(new OutputStreamWriter(o1));
         OutputStream o2 = new BufferedOutputStream(Files.newOutputStream(pathTypes, WRITE,TRUNCATE_EXISTING));
         BufferedWriter writer2 = new BufferedWriter(new OutputStreamWriter(o2));
         OutputStream o3 = new BufferedOutputStream(Files.newOutputStream(pathDefinitions, WRITE,TRUNCATE_EXISTING));
         BufferedWriter writer3 = new BufferedWriter(new OutputStreamWriter(o3));
         for(String ele:vocabWords)
         {
             writer1.write(ele);
             writer1.newLine();
         }
         writer1.close();
         for(String ele:wordTypes)
         {
             writer2.write(ele);
             writer2.newLine();
         }
         writer2.close();
         for(String ele:definitions)
         {
             writer3.write(ele);
             writer3.newLine();
         }
         writer3.close();
         }
         catch(Exception e)
         {
             System.out.print("Message: " + e);
         }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed

        if(isSorted() == true) //reverts back from old to new.
        {
        vocabList.setModel(new javax.swing.AbstractListModel<String>() { //refreshes the list.
            @Override
            public int getSize() { return vocabWords.size(); }
            @Override
            public String getElementAt(int i) { return vocabWords.get(i);}
        });
        setSorted(false);
        }
        else //reverts back from A to Z
        {
            vocabList.setModel(new javax.swing.AbstractListModel<String>() { //refreshes the list.
            @Override
            public int getSize() { return sortedWords.size(); }
            @Override
            public String getElementAt(int i) { return sortedWords.get(i);}
        });
        setSorted(true);
     }
    }//GEN-LAST:event_sortButtonActionPerformed

    private void searchBarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchBarCaretUpdate
       String test = searchBar.getText();
       x = 0;
       if(test.equals(""))
       {
           test = "Implausible";
       }
       vocabList.setSelectedIndex(0);
       textDesc.setForeground(Color.black); //if error transpired, this resets the foreground
       try
       {
         for(String ele:vocabWords)
         {
          if(vocabWords.contains(test))
          {
         while(!test.equalsIgnoreCase(vocabList.getSelectedValue())) //If test doesn't equal the selected value, the loop continues because it is true.
          {
            if(vocabList.getSelectedValue().equals(test)) //If test does equal the selected value, then the loop stops
            {
                 vocabList.setSelectedIndex(x);
            }
            else //otherwise, the loop keeps going
            {
                vocabList.setSelectedIndex(x++);
            }
          }
          }
          else
          {
              textDesc.setText("No matches found. Please make sure you are spelling the word in the list as it is.");
          }
         }
       }
       catch(IndexOutOfBoundsException ex)
       {
          textDesc.setForeground(Color.red);
          textDesc.setText("Error. Please make sure that the word is spelled correctly, and the first letter is capitalized.");
          vocabList.setSelectedIndex(-1);
       }
    }//GEN-LAST:event_searchBarCaretUpdate

    int VLSavedIndex;
    private void setIndex(int ind)
    {
        VLSavedIndex = ind;
    }
    private int getIndex()
    {
        return VLSavedIndex;
    }
    private void setEditDialog(int z)
    {
           wordTextEdit.setText(vocabWords.get(z));
           editMeaning.setText(definitions.get(z));
           String test2 = wordTypes.get(z);
           switch(test2)
           {
               case "Noun": wordCatBoxEdit.setSelectedIndex(0);
               break;
               case "Verb": wordCatBoxEdit.setSelectedIndex(1);
               break;
               case "Adjective": wordCatBoxEdit.setSelectedIndex(2);
               break;
               case "Pronoun": wordCatBoxEdit.setSelectedIndex(3);
               break;
               case "Adverb": wordCatBoxEdit.setSelectedIndex(4);
               break;
               case "Interjection": wordCatBoxEdit.setSelectedIndex(5);
               break;
               case "Preposition": wordCatBoxEdit.setSelectedIndex(6);
               break;
               case "Conjunction": wordCatBoxEdit.setSelectedIndex(7);
               break;
               default: wordCatBoxEdit.setSelectedIndex(0);
           }
    }
    private void setSorted(boolean sorted) //sets the flag as needed
    {
       if(sorted == true)
       {
           sort = true;
       }
       else
       {
           sort = false;
       }
    }
    private boolean isSorted() //checks the flag for indication.
    {
        return sort;
    }
    private void initWords() throws IOException //used if the file "Words" does not exist.
    {
         vocabWords.add("Implausible");
         vocabWords.add("Pedigree");
         vocabWords.add("Meticulous");
         vocabWords.add("Carnassial");
         vocabWords.add("Acrimonious");
         vocabWords.add("Confrontational");
         vocabWords.add("Bowdlerize");
         vocabWords.add("Expurgate");
         vocabWords.add("Asperity");
         vocabWords.add("Venerable");
         vocabWords.add("Consternation");
         vocabWords.add("Expedient");
         vocabWords.add("Fain");
         vocabWords.add("Odium");
         vocabWords.add("Buttress");
         vocabWords.add("Palpate");
         vocabWords.add("Evince");
         vocabWords.add("Maxim");
         vocabWords.add("Estrangement");
         vocabWords.add("Notwithstanding");
         vocabWords.add("Bate");
         vocabWords.add("Altruistic");
         vocabWords.add("Replete");
         vocabWords.add("Enormity");
         vocabWords.add("Contemplate");
         vocabWords.add("Liaison");
         vocabWords.add("Fecund");
         vocabWords.add("Surmise");
         vocabWords.add("Extrapolation");
         vocabWords.add("Insularity");
         vocabWords.add("Truculence");
         vocabWords.add("Obstreperous");
         vocabWords.add("Chicanery");
         vocabWords.add("Intransigence");
         vocabWords.add("Mendacious");
         vocabWords.add("Castigation");
         vocabWords.add("Iconoclastic");
         vocabWords.add("Soporific");
         vocabWords.add("Convoluted");
         vocabWords.add("Verbose");
         vocabWords.add("Desiccate");
         vocabWords.add("Commensurate");
         vocabWords.add("Gregarious");
         vocabWords.add("Loquacious");
         vocabWords.add("Harangue");
         vocabWords.add("Alacrity");
         vocabWords.add("Ebullient");
         vocabWords.add("Eclectic");
         vocabWords.add("Idolatry");
         vocabWords.add("Effrontery");
         vocabWords.add("Imperturbable");
         vocabWords.add("Mollify");
         vocabWords.add("Enervate");
         vocabWords.add("Obdurate");
         vocabWords.add("Obviate");
         vocabWords.add("Erudite");
         vocabWords.add("Onerous");
         vocabWords.add("Attenuate");
         vocabWords.add("Innocuous");
         vocabWords.add("Paucity");
         vocabWords.add("Perfidious");
         vocabWords.add("Perfunctory");
         vocabWords.add("Irresolute");
         vocabWords.add("Rescind");
         vocabWords.add("Stigma");
         vocabWords.add("Vacillate");
         vocabWords.add("Salubrious");
         vocabWords.add("Tirade");
         vocabWords.add("Proliferate");
         vocabWords.add("Specious");
         vocabWords.add("Cogent");
         vocabWords.add("Disseminate");
         vocabWords.add("Pusillanimous");
         vocabWords.add("Inimical");
         vocabWords.add("Insensate");
         vocabWords.add("Insinuate");
         vocabWords.add("Idiosyncratic");
         vocabWords.add("Ignominious");
         vocabWords.add("Vapid");
         vocabWords.add("Venial");
         vocabWords.add("Scintilla");
         vocabWords.add("Redoubtable");
         vocabWords.add("Preternatural");
         vocabWords.add("Postulate");
         vocabWords.add("Perpetual");
         vocabWords.add("Nonentity");
         vocabWords.add("Machination");
         vocabWords.add("Lout");
         vocabWords.add("Felicitous");
         vocabWords.add("Apocryphal");
         vocabWords.add("Apotheosis");
         vocabWords.add("Arrogate");
         vocabWords.add("Ascendency");
         vocabWords.add("Askance");
         vocabWords.add("Callous");
         vocabWords.add("Cadaverous");
         vocabWords.add("Contemptuous");
         vocabWords.add("Deign");
         vocabWords.add("Depredation");
         vocabWords.add("Disquisition");
         vocabWords.add("Dissimulate");
         vocabWords.add("Elysian");
         vocabWords.add("Enjoin");
         vocabWords.add("Evanescent");
         vocabWords.add("Execrate");
         vocabWords.add("Expostulation");
         vocabWords.add("Contiguous");
         vocabWords.add("Betrothal");
         vocabWords.add("Ardent");
         vocabWords.add("Beset");
         vocabWords.add("Propensity");
         vocabWords.add("Propriety");
         vocabWords.add("Itemize");
         vocabWords.add("Circumspect");
         vocabWords.add("Circumvent");
         vocabWords.add("Circumlocution");
         vocabWords.add("Circumambulate");
         vocabWords.add("Bifurcate");
         vocabWords.add("Anthropophagy");
         vocabWords.add("Insouciant");
         vocabWords.add("Equivocate");
         vocabWords.add("Abet");
         vocabWords.add("Abeyance");
         vocabWords.add("Cessation");
         vocabWords.add("Abjure");
         vocabWords.add("Abstemious");
         vocabWords.add("Accede");
         vocabWords.add("Acme");
         vocabWords.add("Aquiesce");
         vocabWords.add("Servile");
         vocabWords.add("Allay");
         vocabWords.add("Aphorism");
         vocabWords.add("Austere");
         vocabWords.add("Wistful");
         vocabWords.add("Seethe");
         vocabWords.add("Rudiment");
         vocabWords.add("Retrench");
         vocabWords.add("Prattle");
         vocabWords.add("Subaltern");
         vocabWords.add("Supercilious");
         vocabWords.add("Vitiate");
         vocabWords.add("Desultory");
         vocabWords.add("Latent");
         vocabWords.add("Concoct");
         vocabWords.add("Articulate");
         vocabWords.add("Hermetic");
         vocabWords.add("Errant");
         vocabWords.add("Bereavement");
         vocabWords.add("Taciturn");
         vocabWords.add("Prerogative");
         vocabWords.add("Provisional");
         vocabWords.add("Interim");
         vocabWords.add("Interegnum");
         vocabWords.add("Issuance");
         vocabWords.add("Promulgate");
         vocabWords.add("Clarion");
         vocabWords.add("Indemnify");
         vocabWords.add("Semantics");
         vocabWords.add("Esoteric");
         vocabWords.add("Abstruse");
         vocabWords.add("Cognizance");
         vocabWords.add("Imbecility");
         vocabWords.add("Apperception");
         vocabWords.add("Indescrete");
         vocabWords.add("Stochastic");
         vocabWords.add("Casuistry");
         vocabWords.add("Vacuity");
         vocabWords.add("Animadvert");
         vocabWords.add("Ignis Fatuus");
         vocabWords.add("Colophon");
         vocabWords.add("Dereliction");
         vocabWords.add("Cavil");
         vocabWords.add("Cant");
         vocabWords.add("Auspicate");
         vocabWords.add("Irrupt");
         vocabWords.add("Propinquity");
         vocabWords.add("Meretricious");
         vocabWords.add("Velleity");
         vocabWords.add("Noetic");
         vocabWords.add("Esurient");
         vocabWords.add("Coquettish");
         vocabWords.add("Lacuna");
         vocabWords.add("Austral");
         vocabWords.add("Prorogue");
         vocabWords.add("Quondom");
         vocabWords.add("Sepulchral");
         vocabWords.add("Relegate");
         vocabWords.add("Behest");
         vocabWords.add("Officious");
         vocabWords.add("Assiduous");
         vocabWords.add("Pertinacious");
         vocabWords.add("Sedulous");
         vocabWords.add("Ostracize");
         vocabWords.add("Conducive");
         vocabWords.add("Reprobate");
         vocabWords.add("Parochial");
         vocabWords.add("Vellication");
         vocabWords.add("Stymie");
         vocabWords.add("Divulge");
         vocabWords.add("Phreatic");
         vocabWords.add("Assent");
         vocabWords.add("Chiasmus");
         vocabWords.add("Adumbrate");
         vocabWords.add("Pasquinade");
         vocabWords.add("Flagitious");
         vocabWords.add("Arbitrage");
         vocabWords.add("Connubial");
         vocabWords.add("Vainglorious");
         vocabWords.add("Agglomeration");
         vocabWords.add("Amalgamate");
         vocabWords.add("Lugubrious");
         vocabWords.add("Versatility");
         vocabWords.add("Conviviality");
         vocabWords.add("Redact");
         vocabWords.add("Constituent");
         vocabWords.add("Incredulous");
         vocabWords.add("Syncretize");
         vocabWords.add("Atavistic");
         vocabWords.add("Magisterial");
         vocabWords.add("Magniloquence");
         vocabWords.add("Untenable");
         vocabWords.add("Pulchritudinous");
         vocabWords.add("Eidetic");
         vocabWords.add("Cynosure");
         vocabWords.add("Garrulous");
         vocabWords.add("Educe");
         vocabWords.add("Maladroit");
         vocabWords.add("Malediction");
         vocabWords.add("Malign");
         vocabWords.add("Dilapidated");
         vocabWords.add("Incipient");
         vocabWords.add("Azoic");
         vocabWords.add("Confluence");
         vocabWords.add("Menial");
         vocabWords.add("Iniquitous");
         vocabWords.add("Facsimile");
         vocabWords.add("Emanation");
         vocabWords.add("Inundate");
         vocabWords.add("Denigration");
         vocabWords.add("Anathematize");
         vocabWords.add("Cogitation");
         vocabWords.add("Recondite");
         vocabWords.add("Sordid");
         vocabWords.add("Squalid");
        for(int i = 0; i < vocabWords.size(); i++)
      {
         sortedWords.add(vocabWords.get(i));
      }
      Collections.sort(sortedWords);
         try
         {
         OutputStream output = new BufferedOutputStream(Files.newOutputStream(pathWords, CREATE));
         BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(output));
            
            for(String ele:vocabWords)
            {
                writer.write(ele);
                writer.newLine();
            }
         writer.close();
         }
         catch(Exception e)
         {
             System.out.print("Message: " + e);
         }
    }
    private void initTypes() throws IOException //used if the file "Types" does not exist.
    {
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Noun"); //Expedient
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Verb");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Adverb");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Noun"); //Enormity
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Noun"); //Castigation
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Adjective"); //Eclectic
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Noun"); //Paucity
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Verb"); //Disseminate
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Verb"); //Postulate
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Adverb");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective"); //Cadaverous
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Noun"); //Betrothal
         wordTypes.add("Adjective");
         wordTypes.add("Beset");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Adjective"); //Insouciant
         wordTypes.add("Verb");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Noun"); //Aphorism
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Verb"); //Concoct
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Adjective"); //Clarion
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Verb"); //Animadvert
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective"); //Esurient
         wordTypes.add("Adverb");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective"); //Sedulous
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Noun"); //Pasquinade
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Adjective"); //Incredulous
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Noun"); //Malediction
         wordTypes.add("Verb");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Noun");
         wordTypes.add("Noun");
         wordTypes.add("Verb");
         wordTypes.add("Noun");
         wordTypes.add("Verb"); //Anathematize
         wordTypes.add("Noun");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         wordTypes.add("Adjective");
         try
         {
         OutputStream output = new BufferedOutputStream(Files.newOutputStream(pathTypes, CREATE));
         BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(output));
            
            for(String ele:wordTypes)
            {
                writer.write(ele);
                writer.newLine();
            }
         writer.close();
         }
         catch(Exception e)
         {
             System.out.print("Message: " + e);
         }
    }
    private void initDef() throws IOException //used if the file "Definitions" does not exist.
    {
         definitions.add("Highly imaginative, but unlikely.");
        definitions.add("Bloodline of someone");
        definitions.add("Extreme care and thorough");
        definitions.add("Molar and premolar teeth that can shred objects");
        definitions.add("Bitter argument or speech");
        definitions.add("Arguing forcefully");
        definitions.add("To censor");
        definitions.add("To censor");
        definitions.add("Harsh tone");
        definitions.add("Admired because of status or age");
        definitions.add("Fear resulting from danger");
        definitions.add("Easy to achieve");
        definitions.add("Willing to do something");
        definitions.add("State of disgrace from detestable behavior");
        definitions.add("To make Defensible");
        definitions.add("To examine with bare hands");
        definitions.add("To reveal");
        definitions.add("Succint statement of a rule or conduct");
        definitions.add("Feeling of not belonging here");
        definitions.add("Despite of");
        definitions.add("To restrain or lessen the force of");
        definitions.add("Not selfish");
        definitions.add("Renourish");
        definitions.add("Grave crime");
        definitions.add("To think about");
        definitions.add("Relationship");
        definitions.add("Easily reproducable");
        definitions.add("Infer from incomplete facts");
        definitions.add("Inference about the future based on facts");
        definitions.add("Detached or isolated");
        definitions.add("Aggressiveness");
        definitions.add("Noisy, defiant");
        definitions.add("Deceive and manipulation");
        definitions.add("Refusing to change");
        definitions.add("Lies habitually");
        definitions.add("Verbal reprimanding");
        definitions.add("Characterized by attack on established beliefs or institutions");
        definitions.add("Sleep inducing");
        definitions.add("Highly complex or intricate and occasionally devious");
        definitions.add("Using or containing too many words");
        definitions.add("Lacking vitality or spirit; lifeless");
        definitions.add("Corresponding in size or degree or extent");
        definitions.add("Instinctively or temperamentally seeking and enjoying the company of others");
        definitions.add("Full of trivial conversation");
        definitions.add("A loud bombastic declamation expressed with strong emotion");
        definitions.add("Liveliness and eagerness");
        definitions.add("Joyously unrestrained");
        definitions.add("Selecting what seems best of various styles or ideas");
        definitions.add("The worship of idols; the worship of images that are not God");
        definitions.add("Audacious (even arrogant) behavior that you have no right to");
        definitions.add("Not easily perturbed or excited or upset; marked by extreme calm and composure");
        definitions.add("Cause to be more favorably inclined; gain the good will of");
        definitions.add("Weaken mentally or morally");
        definitions.add("Stubbornly persistent in wrongdoing");
        definitions.add("Prevent the occurrence of; prevent from happening");
        definitions.add("Having or showing profound knowledge");
        definitions.add("Not easily borne; wearing");
        definitions.add("Become weaker, in strength, value, or magnitude");
        definitions.add("Not injurious to physical or mental health");
        definitions.add("An insufficient quantity or number");
        definitions.add("Tending to betray; especially having a treacherous character as attributed to the Carthaginians by the Romans");
        definitions.add("Hasty and without attention to detail; not thorough");
        definitions.add("Uncertain how to act or proceed");
        definitions.add("Cancel officially");
        definitions.add("A symbol of disgrace or infamy");
        definitions.add("Be undecided about something; waver between conflicting positions or courses of action");
        definitions.add("Promoting health; healthful");
        definitions.add("A speech of violent denunciation");
        definitions.add("Grow rapidly");
        definitions.add("Plausible but false");
        definitions.add("Powerfully persuasive");
        definitions.add("Cause to become widely known");
        definitions.add("Lacking in courage and strength and resolution; contemptibly fearful");
        definitions.add("Not friendly");
        definitions.add("Devoid of feeling and consciousness and animation");
        definitions.add("Introduce or insert (oneself) in a subtle manner");
        definitions.add("Peculiar to the individual");
        definitions.add("Used of conduct or character) Deserving or bringing disgrace or shame");
        definitions.add("Lacking significance or liveliness or spirit or zest");
        definitions.add("Easily excused or forgiven");
        definitions.add("A tiny or scarcely detectable amount");
        definitions.add("Worthy of respect or honor");
        definitions.add("Existing outside of or not in accordance with nature");
        definitions.add("Maintain or assert");
        definitions.add("Continuing forever or indefinitely");
        definitions.add("A person of no influence");
        definitions.add("A crafty and involved plot to achieve your (usually sinister) ends");
        definitions.add("An awkward stupid person");
        definitions.add("Exhibiting an agreeably appropriate manner or style");
        definitions.add("Being of questionable authenticity");
        definitions.add("Model of excellence or perfection of a kind; one having no equal");
        definitions.add("Seize and take control without authority and possibly with force; take as one's right or possession");
        definitions.add("The state that exists when one person or group has power over another");
        definitions.add("With suspicion or disapproval");
        definitions.add("Emotionally hardened");
        definitions.add("Very thin especially from disease or hunger or cold");
        definitions.add("Expressing extreme contempt");
        definitions.add("Do something that one considers to be below one's dignity");
        definitions.add("An act of plundering and pillaging and marauding");
        definitions.add("An elaborate analytical or explanatory essay or discussion");
        definitions.add("Hide (feelings) from other people");
        definitions.add("Being of such surpassing excellence as to suggest inspiration by the gods");
        definitions.add("Give instructions to or direct somebody to do something with authority");
        definitions.add("Tending to vanish like vapor");
        definitions.add("Curse or declare to be evil or anathema or threaten with divine punishment");
        definitions.add("An exclamation of protest or remonstrance or reproof");
        definitions.add("Having a common boundary or edge; abutting; touching");
        definitions.add("The act of becoming betrothed or engaged");
        definitions.add("Characterized by intense emotion");
        definitions.add("Assail or attack on all sides");
        definitions.add("A natural inclination");
        definitions.add("Correctitude");
        definitions.add("Specify individually");
        definitions.add("Heedful of potential consequences");
        definitions.add("Avoid or try to avoid fulfilling, answering, or performing (duties, questions, or issues)");
        definitions.add("An indirect way of expressing something");
        definitions.add("Walk around something");
        definitions.add("Split or divide into two");
        definitions.add("Human cannibalism; the eating of human flesh");
        definitions.add("Marked by blithe unconcern");
        definitions.add("Be deliberately ambiguous or unclear in order to mislead or withhold information");
        definitions.add("Assist or encourage, usually in some wrongdoing");
        definitions.add("Temporary cessation or suspension");
        definitions.add("A stopping");
        definitions.add("Formally reject or disavow a formerly held belief, usually under pressure");
        definitions.add("Marked by temperance in indulgence");
        definitions.add("Yield to another's wish or opinion");
        definitions.add("The highest point (of something)");
        definitions.add("Agree or express agreement");
        definitions.add("Submissive or fawning in attitude or behavior");
        definitions.add("Lessen the intensity of or calm");
        definitions.add("A short pithy instructive saying");
        definitions.add("Of a stern or strict bearing or demeanor; forbidding in aspect");
        definitions.add("Showing pensive sadness");
        definitions.add("Be in an agitated emotional state");
        definitions.add("Being in the earliest stages of development");
        definitions.add("Tighten one's belt; use resources carefully");
        definitions.add("Speak (about unimportant matters) rapidly and incessantly");
        definitions.add("Inferior in rank or status");
        definitions.add("Having or showing arrogant superiority to and disdain of those one views as unworthy");
        definitions.add("Make imperfect");
        definitions.add("Marked by lack of definite plan or regularity or purpose; jumping from one thing to another");
        definitions.add("Potentially existing but not presently evident or realized");
        definitions.add("Devise or invent");
        definitions.add("Express or state clearly");
        definitions.add("Completely sealed; completely airtight");
        definitions.add("Straying from the right course or from accepted standards");
        definitions.add("State of sorrow over the death or departure of a loved one");
        definitions.add("Habitually reserved and uncommunicative");
        definitions.add("A right reserved exclusively by a particular person or group (especially a hereditary or official right)");
        definitions.add("Under terms not final or fully worked out or agreed upon");
        definitions.add("The time between one event, process, or period and another");
        definitions.add("The time between two reigns, governments, etc.");
        definitions.add("The act of providing an item for general use or for official purposes (usually in quantity)");
        definitions.add("State or announce");
        definitions.add("Loud and clear");
        definitions.add("Secure against future loss, damage, or liability; give security for");
        definitions.add("The study of language meaning");
        definitions.add("Confined to and understandable by only an enlightened inner circle");
        definitions.add("Difficult to penetrate; incomprehensible to one of ordinary understanding or knowledge");
        definitions.add("The state of having knowledge of");
        definitions.add("Stupidity more severe than a moron but not as severe as an idiot");
        definitions.add("The process whereby perceived qualities of an object are related to past experience");
        definitions.add("Not divided or divisible into parts");
        definitions.add("Being or having a random variable");
        definitions.add("Argumentation that is specious or excessively subtle and intended to be misleading");
        definitions.add("The absence of matter");
        definitions.add("Express blame or censure or make a harshly critical remark");
        definitions.add("An illusion that misleads");
        definitions.add("A publisher's emblem printed in a book (usually on the title page)");
        definitions.add("Willful negligence");
        definitions.add("Raise trivial objections");
        definitions.add("Stock phrases that have become nonsense through endless repetition");
        definitions.add("Indicate by signs");
        definitions.add("Erupt or intensify suddenly");
        definitions.add("The property of being close together");
        definitions.add("Tastelessly showy");
        definitions.add("A mere wish, unaccompanied by effort to obtain");
        definitions.add("Of or associated with or requiring the use of the mind");
        definitions.add("Extremely hungry");
        definitions.add("In a flirtatious manner");
        definitions.add("A blank gap or missing part");
        definitions.add("Of the south or coming from the south");
        definitions.add("Hold back to a later time");
        definitions.add("Belonging to some prior time");
        definitions.add("Suited to or suggestive of a grave or burial");
        definitions.add("Assign to a lower position; reduce in rank");
        definitions.add("An authoritative command or request");
        definitions.add("Intrusive in a meddling or offensive manner");
        definitions.add("Marked by care and persistent effort");
        definitions.add("Stubbornly unyielding");
        definitions.add("Marked by care and persistent effort");
        definitions.add("Expel from a community or group");
        definitions.add("Tending to bring about; being partly responsible for");
        definitions.add("A person without moral scruples");
        definitions.add("Narrowly restricted in outlook or scope");
        definitions.add("A sudden muscle spasm; especially one caused by a nervous condition");
        definitions.add("Hinder or prevent the progress or accomplishment of");
        definitions.add("Make known to the public information that was previously known only to a few people or that was meant to be kept a secret");
        definitions.add("Of or relating to ground water");
        definitions.add("Agree or express agreement");
        definitions.add("Inversion in the second of two parallel phrases");
        definitions.add("Describe roughly or briefly or give the main points or summary of");
        definitions.add("A composition that imitates or misrepresents somebody's style, usually in a humorous way");
        definitions.add("Extremely wicked, deeply criminal");
        definitions.add("A kind of hedged investment meant to capture slight differences in price; when there is a difference in the price of something on two different markets the arbitrageur simultaneously buys at the lower price and sells at the higher price");
        definitions.add("Of or relating to marriage or to the relationship between people who are married");
        definitions.add("Feeling self-importance");
        definitions.add("The act of collecting in a mass; the act of agglomerating");
        definitions.add("Bring or combine together or with something else");
        definitions.add("Excessively mournful");
        definitions.add("Having a wide variety of skills");
        definitions.add("A jovial nature");
        definitions.add("Prepare for publication or presentation by correcting, revising, or adapting");
        definitions.add("An artifact that is one of the individual parts of which a composite entity is made up; especially a part that can be separated from or attached to a system");
        definitions.add("Not disposed or willing to believe; unbelieving");
        definitions.add("Unite (beliefs or conflicting principles)");
        definitions.add("Relating to technological regression");
        definitions.add("Used of a person's appearance or behavior; befitting an eminent person");
        definitions.add("High-flown style; excessive use of verbal ornamentation");
        definitions.add("(of theories etc) Incapable of being defended or justified");
        definitions.add("Used of persons only; having great physical beauty");
        definitions.add("Of visual imagery of almost photographic accuracy");
        definitions.add("Something that strongly attracts attention and admiration");
        definitions.add("Full of trivial conversation");
        definitions.add("Develop or evolve from a latent or potential state");
        definitions.add("Not adroit");
        definitions.add("The act of calling down a curse that invokes evil (and usually serves as an insult)");
        definitions.add("Speak unfavorably about");
        definitions.add("In deplorable condition");
        definitions.add("Only partly in existence; imperfectly formed");
        definitions.add("Before the appearance of life");
        definitions.add("A flowing together");
        definitions.add("Used of unskilled work (especially domestic work)");
        definitions.add("Characterized by iniquity; wicked because it is believed to be a sin");
        definitions.add("An exact copy or reproduction");
        definitions.add("The act of emitting; causing to flow forth");
        definitions.add("Fill or cover completely, usually with water");
        definitions.add("An abusive attack on a person's character or good name");
        definitions.add("Curse or declare to be evil or anathema or threaten with divine punishment");
        definitions.add("Attentive consideration and meditation");
        definitions.add("Difficult to penetrate; incomprehensible to one of ordinary understanding or knowledge");
        definitions.add("Morally degraded");
        definitions.add("foul and run-down and repulsive");
         try
         {
         OutputStream output = new BufferedOutputStream(Files.newOutputStream(pathDefinitions, CREATE));
         BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(output));
            
            for(String ele:definitions)
            {
                writer.write(ele);
                writer.newLine();
            }
         writer.close();
         }
         catch(Exception e)
         {
             System.out.print("Message: " + e);
         }
    }
    private String initPWords(String FP) throws IOException //used if the file "Words" exists.
   {
      FileReader fr = new FileReader(FP); 
      DataInputStream dataIn = new DataInputStream(new FileInputStream(FP));
      int x = 0;
            while(dataIn.available()>0) {
               String k = dataIn.readLine();
               vocabWords.add(k);
               System.out.print(vocabWords.get(x) + "\n");
               x++;
            }
        for(int i = 0; i < vocabWords.size(); i++)
      {
         sortedWords.add(vocabWords.get(i));
      }
      Collections.sort(sortedWords);
       return FP;
   }
    private String initPTypes(String FP) throws IOException //used if the file "Types" exists.
   {
      FileReader fr = new FileReader(FP); 
      DataInputStream dataIn = new DataInputStream(new FileInputStream(FP));
      //int x = 0;
            while(dataIn.available()>0) {
               String k = dataIn.readLine();
               wordTypes.add(k);
               //System.out.print(wordTypes.get(x) + "\n");
               //x++;
            }
       return FP;
   }
    private String initPDef(String FP) throws IOException //used if the file "Words" exists.
   {
      FileReader fr = new FileReader(FP); 
      DataInputStream dataIn = new DataInputStream(new FileInputStream(FP));
      //int x = 0;
            while(dataIn.available()>0) {
               String k = dataIn.readLine();
               definitions.add(k);
               //System.out.print(definitions.get(x));
               //x++;
            }
       return FP;
   }
   public static File getFolder()
   {
            File folder = new File("C:\\VocabList"); //the string stores the information in quotes
            String foldr = "" + folder.mkdir(); //Takes the files information and stores the info in a string, making a folder
            return folder;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VocabList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VocabList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VocabList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VocabList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try
                {
                new VocabList().setVisible(true);
                }
                catch(Exception e)
                {
                  System.out.print("Message: " + e);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JFrame addDialog;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton closeButtonEdit;
    private javax.swing.JButton editButton;
    private javax.swing.JFrame editDialog;
    private javax.swing.JTextField editMeaning;
    private javax.swing.JButton editOkButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField meaning;
    private javax.swing.JButton okButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton sortButton;
    private javax.swing.JTextArea textDesc;
    private javax.swing.JList<String> vocabList;
    private javax.swing.JComboBox<String> wordCatBox;
    private javax.swing.JComboBox<String> wordCatBoxEdit;
    private javax.swing.JTextField wordText;
    private javax.swing.JTextField wordTextEdit;
    // End of variables declaration//GEN-END:variables
}
